// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hyperledger/fabric-protos-go-apiv2/peer (interfaces: DeliverClient,Deliver_DeliverClient,Deliver_DeliverFilteredClient,Deliver_DeliverWithPrivateDataClient)
//
// Generated by this command:
//
//	mockgen -destination ./deliver_mock_test.go -package client github.com/hyperledger/fabric-protos-go-apiv2/peer DeliverClient,Deliver_DeliverClient,Deliver_DeliverFilteredClient,Deliver_DeliverWithPrivateDataClient
//

// Package client is a generated GoMock package.
package client

import (
	context "context"
	reflect "reflect"

	common "github.com/hyperledger/fabric-protos-go-apiv2/common"
	peer "github.com/hyperledger/fabric-protos-go-apiv2/peer"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockDeliverClient is a mock of DeliverClient interface.
type MockDeliverClient struct {
	ctrl     *gomock.Controller
	recorder *MockDeliverClientMockRecorder
}

// MockDeliverClientMockRecorder is the mock recorder for MockDeliverClient.
type MockDeliverClientMockRecorder struct {
	mock *MockDeliverClient
}

// NewMockDeliverClient creates a new mock instance.
func NewMockDeliverClient(ctrl *gomock.Controller) *MockDeliverClient {
	mock := &MockDeliverClient{ctrl: ctrl}
	mock.recorder = &MockDeliverClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeliverClient) EXPECT() *MockDeliverClientMockRecorder {
	return m.recorder
}

// Deliver mocks base method.
func (m *MockDeliverClient) Deliver(arg0 context.Context, arg1 ...grpc.CallOption) (peer.Deliver_DeliverClient, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Deliver", varargs...)
	ret0, _ := ret[0].(peer.Deliver_DeliverClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Deliver indicates an expected call of Deliver.
func (mr *MockDeliverClientMockRecorder) Deliver(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deliver", reflect.TypeOf((*MockDeliverClient)(nil).Deliver), varargs...)
}

// DeliverFiltered mocks base method.
func (m *MockDeliverClient) DeliverFiltered(arg0 context.Context, arg1 ...grpc.CallOption) (peer.Deliver_DeliverFilteredClient, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeliverFiltered", varargs...)
	ret0, _ := ret[0].(peer.Deliver_DeliverFilteredClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeliverFiltered indicates an expected call of DeliverFiltered.
func (mr *MockDeliverClientMockRecorder) DeliverFiltered(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeliverFiltered", reflect.TypeOf((*MockDeliverClient)(nil).DeliverFiltered), varargs...)
}

// DeliverWithPrivateData mocks base method.
func (m *MockDeliverClient) DeliverWithPrivateData(arg0 context.Context, arg1 ...grpc.CallOption) (peer.Deliver_DeliverWithPrivateDataClient, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeliverWithPrivateData", varargs...)
	ret0, _ := ret[0].(peer.Deliver_DeliverWithPrivateDataClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeliverWithPrivateData indicates an expected call of DeliverWithPrivateData.
func (mr *MockDeliverClientMockRecorder) DeliverWithPrivateData(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeliverWithPrivateData", reflect.TypeOf((*MockDeliverClient)(nil).DeliverWithPrivateData), varargs...)
}

// MockDeliver_DeliverClient is a mock of Deliver_DeliverClient interface.
type MockDeliver_DeliverClient struct {
	ctrl     *gomock.Controller
	recorder *MockDeliver_DeliverClientMockRecorder
}

// MockDeliver_DeliverClientMockRecorder is the mock recorder for MockDeliver_DeliverClient.
type MockDeliver_DeliverClientMockRecorder struct {
	mock *MockDeliver_DeliverClient
}

// NewMockDeliver_DeliverClient creates a new mock instance.
func NewMockDeliver_DeliverClient(ctrl *gomock.Controller) *MockDeliver_DeliverClient {
	mock := &MockDeliver_DeliverClient{ctrl: ctrl}
	mock.recorder = &MockDeliver_DeliverClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeliver_DeliverClient) EXPECT() *MockDeliver_DeliverClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockDeliver_DeliverClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockDeliver_DeliverClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockDeliver_DeliverClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockDeliver_DeliverClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockDeliver_DeliverClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockDeliver_DeliverClient)(nil).Context))
}

// Header mocks base method.
func (m *MockDeliver_DeliverClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockDeliver_DeliverClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockDeliver_DeliverClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockDeliver_DeliverClient) Recv() (*peer.DeliverResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*peer.DeliverResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockDeliver_DeliverClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockDeliver_DeliverClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockDeliver_DeliverClient) RecvMsg(arg0 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockDeliver_DeliverClientMockRecorder) RecvMsg(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockDeliver_DeliverClient)(nil).RecvMsg), arg0)
}

// Send mocks base method.
func (m *MockDeliver_DeliverClient) Send(arg0 *common.Envelope) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockDeliver_DeliverClientMockRecorder) Send(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockDeliver_DeliverClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m *MockDeliver_DeliverClient) SendMsg(arg0 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockDeliver_DeliverClientMockRecorder) SendMsg(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockDeliver_DeliverClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method.
func (m *MockDeliver_DeliverClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockDeliver_DeliverClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockDeliver_DeliverClient)(nil).Trailer))
}

// MockDeliver_DeliverFilteredClient is a mock of Deliver_DeliverFilteredClient interface.
type MockDeliver_DeliverFilteredClient struct {
	ctrl     *gomock.Controller
	recorder *MockDeliver_DeliverFilteredClientMockRecorder
}

// MockDeliver_DeliverFilteredClientMockRecorder is the mock recorder for MockDeliver_DeliverFilteredClient.
type MockDeliver_DeliverFilteredClientMockRecorder struct {
	mock *MockDeliver_DeliverFilteredClient
}

// NewMockDeliver_DeliverFilteredClient creates a new mock instance.
func NewMockDeliver_DeliverFilteredClient(ctrl *gomock.Controller) *MockDeliver_DeliverFilteredClient {
	mock := &MockDeliver_DeliverFilteredClient{ctrl: ctrl}
	mock.recorder = &MockDeliver_DeliverFilteredClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeliver_DeliverFilteredClient) EXPECT() *MockDeliver_DeliverFilteredClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockDeliver_DeliverFilteredClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockDeliver_DeliverFilteredClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockDeliver_DeliverFilteredClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockDeliver_DeliverFilteredClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockDeliver_DeliverFilteredClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockDeliver_DeliverFilteredClient)(nil).Context))
}

// Header mocks base method.
func (m *MockDeliver_DeliverFilteredClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockDeliver_DeliverFilteredClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockDeliver_DeliverFilteredClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockDeliver_DeliverFilteredClient) Recv() (*peer.DeliverResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*peer.DeliverResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockDeliver_DeliverFilteredClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockDeliver_DeliverFilteredClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockDeliver_DeliverFilteredClient) RecvMsg(arg0 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockDeliver_DeliverFilteredClientMockRecorder) RecvMsg(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockDeliver_DeliverFilteredClient)(nil).RecvMsg), arg0)
}

// Send mocks base method.
func (m *MockDeliver_DeliverFilteredClient) Send(arg0 *common.Envelope) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockDeliver_DeliverFilteredClientMockRecorder) Send(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockDeliver_DeliverFilteredClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m *MockDeliver_DeliverFilteredClient) SendMsg(arg0 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockDeliver_DeliverFilteredClientMockRecorder) SendMsg(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockDeliver_DeliverFilteredClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method.
func (m *MockDeliver_DeliverFilteredClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockDeliver_DeliverFilteredClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockDeliver_DeliverFilteredClient)(nil).Trailer))
}

// MockDeliver_DeliverWithPrivateDataClient is a mock of Deliver_DeliverWithPrivateDataClient interface.
type MockDeliver_DeliverWithPrivateDataClient struct {
	ctrl     *gomock.Controller
	recorder *MockDeliver_DeliverWithPrivateDataClientMockRecorder
}

// MockDeliver_DeliverWithPrivateDataClientMockRecorder is the mock recorder for MockDeliver_DeliverWithPrivateDataClient.
type MockDeliver_DeliverWithPrivateDataClientMockRecorder struct {
	mock *MockDeliver_DeliverWithPrivateDataClient
}

// NewMockDeliver_DeliverWithPrivateDataClient creates a new mock instance.
func NewMockDeliver_DeliverWithPrivateDataClient(ctrl *gomock.Controller) *MockDeliver_DeliverWithPrivateDataClient {
	mock := &MockDeliver_DeliverWithPrivateDataClient{ctrl: ctrl}
	mock.recorder = &MockDeliver_DeliverWithPrivateDataClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeliver_DeliverWithPrivateDataClient) EXPECT() *MockDeliver_DeliverWithPrivateDataClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockDeliver_DeliverWithPrivateDataClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockDeliver_DeliverWithPrivateDataClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockDeliver_DeliverWithPrivateDataClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockDeliver_DeliverWithPrivateDataClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockDeliver_DeliverWithPrivateDataClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockDeliver_DeliverWithPrivateDataClient)(nil).Context))
}

// Header mocks base method.
func (m *MockDeliver_DeliverWithPrivateDataClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockDeliver_DeliverWithPrivateDataClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockDeliver_DeliverWithPrivateDataClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockDeliver_DeliverWithPrivateDataClient) Recv() (*peer.DeliverResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*peer.DeliverResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockDeliver_DeliverWithPrivateDataClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockDeliver_DeliverWithPrivateDataClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockDeliver_DeliverWithPrivateDataClient) RecvMsg(arg0 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockDeliver_DeliverWithPrivateDataClientMockRecorder) RecvMsg(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockDeliver_DeliverWithPrivateDataClient)(nil).RecvMsg), arg0)
}

// Send mocks base method.
func (m *MockDeliver_DeliverWithPrivateDataClient) Send(arg0 *common.Envelope) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockDeliver_DeliverWithPrivateDataClientMockRecorder) Send(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockDeliver_DeliverWithPrivateDataClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m *MockDeliver_DeliverWithPrivateDataClient) SendMsg(arg0 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockDeliver_DeliverWithPrivateDataClientMockRecorder) SendMsg(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockDeliver_DeliverWithPrivateDataClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method.
func (m *MockDeliver_DeliverWithPrivateDataClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockDeliver_DeliverWithPrivateDataClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockDeliver_DeliverWithPrivateDataClient)(nil).Trailer))
}
