// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hyperledger/fabric-protos-go-apiv2/gateway (interfaces: GatewayClient,Gateway_ChaincodeEventsClient)
//
// Generated by this command:
//
//	mockgen -destination ./gateway_mock_test.go -package client github.com/hyperledger/fabric-protos-go-apiv2/gateway GatewayClient,Gateway_ChaincodeEventsClient
//

// Package client is a generated GoMock package.
package client

import (
	context "context"
	reflect "reflect"

	gateway "github.com/hyperledger/fabric-protos-go-apiv2/gateway"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockGatewayClient is a mock of GatewayClient interface.
type MockGatewayClient struct {
	ctrl     *gomock.Controller
	recorder *MockGatewayClientMockRecorder
}

// MockGatewayClientMockRecorder is the mock recorder for MockGatewayClient.
type MockGatewayClientMockRecorder struct {
	mock *MockGatewayClient
}

// NewMockGatewayClient creates a new mock instance.
func NewMockGatewayClient(ctrl *gomock.Controller) *MockGatewayClient {
	mock := &MockGatewayClient{ctrl: ctrl}
	mock.recorder = &MockGatewayClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGatewayClient) EXPECT() *MockGatewayClientMockRecorder {
	return m.recorder
}

// ChaincodeEvents mocks base method.
func (m *MockGatewayClient) ChaincodeEvents(arg0 context.Context, arg1 *gateway.SignedChaincodeEventsRequest, arg2 ...grpc.CallOption) (gateway.Gateway_ChaincodeEventsClient, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChaincodeEvents", varargs...)
	ret0, _ := ret[0].(gateway.Gateway_ChaincodeEventsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChaincodeEvents indicates an expected call of ChaincodeEvents.
func (mr *MockGatewayClientMockRecorder) ChaincodeEvents(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChaincodeEvents", reflect.TypeOf((*MockGatewayClient)(nil).ChaincodeEvents), varargs...)
}

// CommitStatus mocks base method.
func (m *MockGatewayClient) CommitStatus(arg0 context.Context, arg1 *gateway.SignedCommitStatusRequest, arg2 ...grpc.CallOption) (*gateway.CommitStatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CommitStatus", varargs...)
	ret0, _ := ret[0].(*gateway.CommitStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitStatus indicates an expected call of CommitStatus.
func (mr *MockGatewayClientMockRecorder) CommitStatus(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitStatus", reflect.TypeOf((*MockGatewayClient)(nil).CommitStatus), varargs...)
}

// Endorse mocks base method.
func (m *MockGatewayClient) Endorse(arg0 context.Context, arg1 *gateway.EndorseRequest, arg2 ...grpc.CallOption) (*gateway.EndorseResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Endorse", varargs...)
	ret0, _ := ret[0].(*gateway.EndorseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Endorse indicates an expected call of Endorse.
func (mr *MockGatewayClientMockRecorder) Endorse(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Endorse", reflect.TypeOf((*MockGatewayClient)(nil).Endorse), varargs...)
}

// Evaluate mocks base method.
func (m *MockGatewayClient) Evaluate(arg0 context.Context, arg1 *gateway.EvaluateRequest, arg2 ...grpc.CallOption) (*gateway.EvaluateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Evaluate", varargs...)
	ret0, _ := ret[0].(*gateway.EvaluateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Evaluate indicates an expected call of Evaluate.
func (mr *MockGatewayClientMockRecorder) Evaluate(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Evaluate", reflect.TypeOf((*MockGatewayClient)(nil).Evaluate), varargs...)
}

// Submit mocks base method.
func (m *MockGatewayClient) Submit(arg0 context.Context, arg1 *gateway.SubmitRequest, arg2 ...grpc.CallOption) (*gateway.SubmitResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Submit", varargs...)
	ret0, _ := ret[0].(*gateway.SubmitResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Submit indicates an expected call of Submit.
func (mr *MockGatewayClientMockRecorder) Submit(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Submit", reflect.TypeOf((*MockGatewayClient)(nil).Submit), varargs...)
}

// MockGateway_ChaincodeEventsClient is a mock of Gateway_ChaincodeEventsClient interface.
type MockGateway_ChaincodeEventsClient struct {
	ctrl     *gomock.Controller
	recorder *MockGateway_ChaincodeEventsClientMockRecorder
}

// MockGateway_ChaincodeEventsClientMockRecorder is the mock recorder for MockGateway_ChaincodeEventsClient.
type MockGateway_ChaincodeEventsClientMockRecorder struct {
	mock *MockGateway_ChaincodeEventsClient
}

// NewMockGateway_ChaincodeEventsClient creates a new mock instance.
func NewMockGateway_ChaincodeEventsClient(ctrl *gomock.Controller) *MockGateway_ChaincodeEventsClient {
	mock := &MockGateway_ChaincodeEventsClient{ctrl: ctrl}
	mock.recorder = &MockGateway_ChaincodeEventsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGateway_ChaincodeEventsClient) EXPECT() *MockGateway_ChaincodeEventsClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockGateway_ChaincodeEventsClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockGateway_ChaincodeEventsClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockGateway_ChaincodeEventsClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockGateway_ChaincodeEventsClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockGateway_ChaincodeEventsClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockGateway_ChaincodeEventsClient)(nil).Context))
}

// Header mocks base method.
func (m *MockGateway_ChaincodeEventsClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockGateway_ChaincodeEventsClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockGateway_ChaincodeEventsClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockGateway_ChaincodeEventsClient) Recv() (*gateway.ChaincodeEventsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*gateway.ChaincodeEventsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockGateway_ChaincodeEventsClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockGateway_ChaincodeEventsClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockGateway_ChaincodeEventsClient) RecvMsg(arg0 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockGateway_ChaincodeEventsClientMockRecorder) RecvMsg(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockGateway_ChaincodeEventsClient)(nil).RecvMsg), arg0)
}

// SendMsg mocks base method.
func (m *MockGateway_ChaincodeEventsClient) SendMsg(arg0 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockGateway_ChaincodeEventsClientMockRecorder) SendMsg(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockGateway_ChaincodeEventsClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method.
func (m *MockGateway_ChaincodeEventsClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockGateway_ChaincodeEventsClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockGateway_ChaincodeEventsClient)(nil).Trailer))
}
